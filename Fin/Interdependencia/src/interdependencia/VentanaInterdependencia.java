/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package interdependencia;

import java.util.ArrayList;

/**
 *
 * @author Nieto
 */
public class VentanaInterdependencia extends javax.swing.JFrame {

    ArrayList<Hito> listhitos = new ArrayList<Hito>();
    
    ArrayList<Hito> jlistaDependencias = new ArrayList<Hito>();
    ArrayList<Hito> jlistaTemporal = new ArrayList<Hito>();
    ArrayList<Hito> jlistaHitos = new ArrayList<Hito>();
   
    String Archivolectura = new String("MiPrimerProyecto.csv");
    
    public VentanaInterdependencia() {
        initComponents();
        
        listhitos.clear();
        jlistaDependencias.clear();
        jlistaTemporal.clear();
        jlistaHitos.clear();
        
        CsvHito.leer(listhitos,Archivolectura);
        
        jlistaHitos=crearlistaHitos(listhitos);
        jListHitos.setListData(listatoArrayString(jlistaHitos));
        jListHitos.setSelectedIndex(0);
        
        jlistaDependencias= crearlistaDependencias(listhitos,obtenerhito(listhitos));
        jlistaTemporal= crearlistaTemporal(listhitos);
      
        
        
        jListTemporal.setListData(listatoArrayString(jlistaTemporal));
        jListDependencias.setListData(listatoArrayString(jlistaDependencias));
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jListHitos = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListTemporal = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListDependencias = new javax.swing.JList();
        jButtonAgregar = new javax.swing.JButton();
        jButtonEliminar = new javax.swing.JButton();
        jButtonDone = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jButtonOpen = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jListHitos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Hitos", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_BOTTOM));
        jListHitos.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListHitos.setEnabled(false);
        jListHitos.setSelectionBackground(new java.awt.Color(255, 255, 204));
        jScrollPane2.setViewportView(jListHitos);

        jListTemporal.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jListTemporal.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jListTemporal);

        jListDependencias.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Dependencias", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_BOTTOM));
        jListDependencias.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(jListDependencias);

        jButtonAgregar.setText(">>");
        jButtonAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAgregarActionPerformed(evt);
            }
        });

        jButtonEliminar.setText("<<");
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });

        jButtonDone.setText("Done");
        jButtonDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDoneActionPerformed(evt);
            }
        });

        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jButtonOpen.setText("Open");
        jButtonOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jButtonOpen, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButtonDone)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButtonSave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 243, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 212, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jButtonAgregar)
                    .add(jButtonEliminar))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 212, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(0, 34, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(73, 73, 73)
                                .add(jButtonAgregar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(66, 66, 66)
                                .add(jButtonEliminar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 303, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jButtonDone, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jButtonSave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jButtonOpen, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(25, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 355, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 355, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAgregarActionPerformed
        // TODO add your handling code here:
        
        if(!jListTemporal.isSelectionEmpty())
        {
            jlistaDependencias.add(jlistaTemporal.get(jListTemporal.getSelectedIndex()));
            jlistaTemporal.remove(jListTemporal.getSelectedIndex());
        
            jListTemporal.setListData(listatoArrayString(jlistaTemporal));
            jListDependencias.setListData(listatoArrayString(jlistaDependencias));
        }
        
    }//GEN-LAST:event_jButtonAgregarActionPerformed

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        // TODO add your handling code here:
        
        if(!jListDependencias.isSelectionEmpty())
        {
            jlistaTemporal.add(jlistaDependencias.get(jListDependencias.getSelectedIndex()));
            jlistaDependencias.remove(jListDependencias.getSelectedIndex());
            
            jListTemporal.setListData(listatoArrayString(jlistaTemporal));
            jListDependencias.setListData(listatoArrayString(jlistaDependencias));
        }
        
        
        
    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void jButtonDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDoneActionPerformed
        // TODO add your handling code here:
        
        for(int i=0; i<listhitos.size(); i++)
            if(listhitos.get(i).getNombre().equals(jlistaHitos.get(0).getNombre()))
            {listhitos.get(i).setDependencias(obtenerdependencias(jlistaDependencias));}

        
        guardarproyecto();
        
        jlistaHitos.remove(0);
        jListHitos.setListData(listatoArrayString(jlistaHitos));
        jListHitos.setSelectedIndex(0);
        
        if(!jListHitos.isSelectionEmpty())
            jlistaDependencias= crearlistaDependencias(listhitos,obtenerhito(listhitos));
        else
            jlistaDependencias.clear();
        
        jlistaTemporal= crearlistaTemporal(listhitos);
       
        
        jListTemporal.setListData(listatoArrayString(jlistaTemporal));
        jListDependencias.setListData(listatoArrayString(jlistaDependencias));
        
        
        
    }//GEN-LAST:event_jButtonDoneActionPerformed

    private void jButtonOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOpenActionPerformed
        // TODO add your handling code here:
        
        // Se guarda el proyecto actual;
        guardarproyecto();
        
        // Se crea un objeto JFileChooser para seleccionar la ruta y el nombre del proyecto;
        javax.swing.JFileChooser jFileChooser1 = new javax.swing.JFileChooser(); 
	jFileChooser1.setDialogType(javax.swing.JFileChooser.OPEN_DIALOG); 
        jFileChooser1.setDragEnabled(true);
	jFileChooser1.setDialogTitle("Abrir Proyecto");
        jFileChooser1.showOpenDialog(null);
        
        // Se asigna la ruta del arhcivo a la variable archivolectura que es entrada para las rutinas leer y escribir;
	Archivolectura = jFileChooser1.getSelectedFile().getAbsolutePath();
        
        // Se limpian las listas generales;
        listhitos.clear();
        
        // Se abre el nuevo proyecto;
        abrirproyecto();
        
        jlistaHitos=crearlistaHitos(listhitos);
        jListHitos.setListData(listatoArrayString(jlistaHitos));
        jListHitos.setSelectedIndex(0);
        
        jlistaDependencias= crearlistaDependencias(listhitos,obtenerhito(listhitos));
        jlistaTemporal= crearlistaTemporal(listhitos);
        
        
        jListTemporal.setListData(listatoArrayString(jlistaTemporal));
        jListDependencias.setListData(listatoArrayString(jlistaDependencias));
        
        
        
    }//GEN-LAST:event_jButtonOpenActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        // TODO add your handling code here:
        
        // Se crea un objeto JFileChooser para seleccionar la ruta y el nombre del proyecto;
        javax.swing.JFileChooser jFileChooser1 = new javax.swing.JFileChooser(); 
	jFileChooser1.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG); 
        jFileChooser1.setDragEnabled(true);
	jFileChooser1.setDialogTitle("Guardar Proyecto");
        jFileChooser1.showSaveDialog(null);
        
        // Se asigna la ruta del archivo a la variable archivolectura que es entrada para las rutinas leer y escribir;
	Archivolectura = jFileChooser1.getSelectedFile().getAbsolutePath()+".csv"; 

        // Se guarda el proyecto;
        guardarproyecto(); 
        
        
        
    }//GEN-LAST:event_jButtonSaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaInterdependencia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaInterdependencia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaInterdependencia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaInterdependencia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new VentanaInterdependencia().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAgregar;
    private javax.swing.JButton jButtonDone;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonOpen;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JList jListDependencias;
    private javax.swing.JList jListHitos;
    private javax.swing.JList jListTemporal;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables



// Creador de Lista a partir de un ArrayList<Hito>;
    public String[] listatoArrayString(ArrayList<Hito> lista)
    {
        // Arreglo temporal;
        String[] jlist1 = new String[lista.size()];
        
        // De cada hito de la lista se obtiene el nombre y se almacena en el arreglo;
        for(int i=0; i<lista.size(); i++)
                jlist1[i]=lista.get(i).getNombre();
        
        // Se regresa el arreglo;
        return jlist1;
    }


    public ArrayList<Hito> crearlistaDependencias(ArrayList<Hito> listhitos, Hito hito)
    {   ArrayList<Hito> temp= new ArrayList<Hito>();
        
         for(int j=0; j<hito.getDependencias().size() ; j++)
            for(int i=0; i< listhitos.size(); i++)
              if(listhitos.get(i).niveltoString().equals(hito.getDependencias().get(j)))
                 temp.add(listhitos.get(i));      
         
         return temp;
        
    }
    
    public ArrayList<Hito> crearlistaTemporal(ArrayList<Hito> listhitos)
    {
        ArrayList<Hito> temp= new ArrayList<Hito>();
        
        for(int i=1; i< listhitos.size(); i++)
            if(listhitos.get(i).isEditable())
                temp.add(listhitos.get(i));
        
        for(int j=0; j< jlistaDependencias.size();j++)
            for(int i=0; i<temp.size(); i++)
                if(jlistaDependencias.get(j).getNombre().equals(temp.get(i).getNombre()) || jlistaHitos.get(jListHitos.getSelectedIndex()).getNombre().equals(temp.get(i).getNombre()))
                    temp.remove(i);
        return temp;
    }
    
    public ArrayList<Hito> crearlistaHitos(ArrayList<Hito> listhitos)
    {
        ArrayList<Hito> temp= new ArrayList<Hito>();
        
        for(int i=1; i<listhitos.size(); i++)
            if(listhitos.get(i).isEditable())
                temp.add(listhitos.get(i));
        
        return temp;
    }
    
    public String obtenerdependencias(ArrayList<Hito> jlistaDependencias)
    {
        String salida="";
        
        for(int i=0; i<jlistaDependencias.size()-1; i++)
            salida += jlistaDependencias.get(i).niveltoString()+"&";
        
        salida += jlistaDependencias.get(jlistaDependencias.size()-1).niveltoString();
          
        return salida;
    }

    public void guardarproyecto()
    {
        CsvHito.escribir(listhitos, Archivolectura);
    }
    
    public void abrirproyecto()
    {
        CsvHito.leer(listhitos, Archivolectura);
    }

    public Hito obtenerhito(ArrayList<Hito> listhito)
    {
        Hito temp = new Hito();
        for(int i=0; i< listhito.size(); i++)
            if(listhito.get(i).getNombre().equals(jlistaHitos.get(jListHitos.getSelectedIndex()).getNombre()))
                temp=listhito.get(i);
                
      return temp;
    }
    
}
